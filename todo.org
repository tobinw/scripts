* TODO [1/3] GET A PHD
  - [X] research qual
    - [X] candidacy doc abstract
    - [X] prelim committee
    - [X] document signatures
  - [-] candidacy exam
    - [X] doctoral committee
    - [ ] presentation
    - [X] document
     - [X] section drafts
     - [ ] generate up-to-date load balancing results
     - [ ] put neuron figures into results
     - [ ] revisions from Mark's notes
  - [ ] defense
    - [ ] presentation
    - [ ] thesis
    - [ ] signatures
* TODO [0/1] Get better understanding of current failure mechanism of the code
  - [ ] look at failure points in Victor's runs on the bgq
  - [ ] look at numerical reasons for divergence at higher strains
* TODO [5/6] run using 4 racks of AMOS BG/Q
  - [X] generate 1m mesh
  - [X] partition mesh to 1024 parts
  - [X] move to AMOS
  - [X] queue run
  - [X] failed, reruning to determine if mesh size has an immediate impact
  - [ ] rerun with 128k mesh failed, so memory allocation error is related to parallel scaling
* TODO [/] Use git directly on the BG/Q
  - [ ] switch over AMSI to use git on Q
  - [ ] move biotissue over to github
  - [ ] switch biotissue to use git on Q
* TODO [9/17] General code improvements
  - [X] eliminate all warnings in biotissue
  - [X] Get rid of the Analysis namespace
  - [X] rename Biotissue namespace to bio
  - [X] different random seed depending on rank
  - [X] allow the subtype of the boundary conditions to look for to be queriable using the field type and the boundary condition type
  - [X] split nonlintissue into single-scale and multi-scale classes
    - [X] create classes
    - [X] create single-scale macro binary
    - [X] localize multi-scale logs and features into multiscale class and single-scale features into single-scale
    - [X] fix issue with convergence check on uninitialized petsc las
    - [X] fix PCU switching issues in multiscale
  - [X] look into suppressing tmpnam warnings
    - not feasible, hard-coded into the c-lib, could objcopy with a strip command but that is WAY overboard
  - [X] switch amsi::logs to  shared_ptrs and weak_ptrs for stream association
  - [-] amsi::log changes
    - [X] Refactor changes to amsi::Log, instead just create a multi-log subclass that handles sending output to multiple streams...
    - [X] since the log is largely just a buffer, maybe just refactor the amsi::writeToStream function to handle a range  of streams instead of a single stream?
    - [X] instead of changing amsi::Log, or adding range-based stream output, add a teestream which splits output to multiple streams
    - [ ] figure out best way to utilize amsi::tee functionality
    - [ ] develop method of associating amsi::log with a stream (can compose streams with hierarchy of tees to write to multiple simultaneously)
    - [ ] figure out how to manage the lifetimes of fstreams related to an amsi::log.... and if using a teestream is even feasible or worthwhile...
  - [X] the nnz in the sparse matrix structure can be easily pre-calculated for truss elements to assign a perfect array to hold the data.. no it CANT
  - [ ] Look at all apf::MeshIterator loops to make sure Mesh::end(MeshIterator) is called
  - [ ] hide the usage of the simmetrix pACase in building the BCQueries, as well as their application (somehow)
    - [ ] building the BCQueries might need to use some dynamic polymorphism to hide the extra data required for the simmetrix queries (the pACase)
  - [ ] Split template implementation and declaration into xx.h and xx_impl.h files
  - [ ] Rename the interface library to the analysis library
  - [ ] replace old sparse matrix implementation in biotissue with new one in amsi_red
   - [ ] make standalone lib with test cases
  - [ ] make sure that petsc is not allocating memory on the fly
  - [ ] pull the mesh adaptation stuff outside of the fea class, make them functions
* TODO [1/6] Make FEA class obsolete
  * [ ] replace with generic nonlinear analysis classes Iteration and Convergence operating on general fields, integrators, and lass
  * [X] generate fields and numberings from simmodeler input
  * [ ] refactor boundary condition application to work with new simmodeler specification
  * [ ] develop algorithm to use bare integrators paired with appropriate field(s) to generate elemental systems for assembly
  * [ ] creating integrators based on simmodler input, or even using simmodeler primitives under sufficiently abstract interfaces
  * [ ] amsi::simIntegrator : public apf::Integrator ?
* TODO [0/6] Add regression test cases
  - [ ] apf field operation test cases
  - [ ] linear_elastic_regression
  - [ ] nonlinear_elastic_regression
  - [ ] partitioned_linear_elastic_regression
  - [ ] uniform_adapt_regression?
  - [ ] error_estimator_regression?
* [ ] check valgrind output for memory leaks
* [ ] check load balancing work to make certain things are still working for biotissue

